{"ast":null,"code":"var _jsxFileName = \"C:\\\\dev\\\\Scrabex\\\\ConfigPortal_react\\\\portal-react-ts\\\\src\\\\components\\\\GlobalState.tsx\",\n    _s = $RefreshSig$(),\n    _s2 = $RefreshSig$();\n\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst GlobalStateContext = /*#__PURE__*/createContext({\n  state: {},\n  setState: {}\n});\n\nconst GlobalState = _ref => {\n  _s();\n\n  let {\n    children,\n    value = {}\n  } = _ref;\n  const [state, setState] = useState(value);\n  return /*#__PURE__*/_jsxDEV(GlobalStateContext.Provider, {\n    value: {\n      state,\n      setState\n    },\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 24,\n    columnNumber: 7\n  }, this);\n};\n\n_s(GlobalState, \"4PODCtvNpJ5O52kq6cGBMraEVrw=\");\n\n_c = GlobalState;\n\nconst UseGlobalState = () => {\n  _s2();\n\n  const context = useContext(GlobalStateContext);\n\n  if (!context) {\n    throw new Error(\"useGlobalState must be used within a GlobalStateContext\");\n  }\n\n  return context;\n};\n\n_s2(UseGlobalState, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\n\n_c2 = UseGlobalState;\nexport { GlobalState, UseGlobalState };\n\nvar _c, _c2;\n\n$RefreshReg$(_c, \"GlobalState\");\n$RefreshReg$(_c2, \"UseGlobalState\");","map":{"version":3,"sources":["C:/dev/Scrabex/ConfigPortal_react/portal-react-ts/src/components/GlobalState.tsx"],"names":["React","createContext","useState","useContext","GlobalStateContext","state","setState","GlobalState","children","value","UseGlobalState","context","Error"],"mappings":";;;;AAAA,OAAOA,KAAP,IAAeC,aAAf,EAA8BC,QAA9B,EAAwCC,UAAxC,QAAmF,OAAnF;;AASE,MAAMC,kBAAkB,gBAAGH,aAAa,CAAC;AACvCI,EAAAA,KAAK,EAAE,EADgC;AAEvCC,EAAAA,QAAQ,EAAE;AAF6B,CAAD,CAAxC;;AAKA,MAAMC,WAAW,GAAG,QAMd;AAAA;;AAAA,MANe;AACnBC,IAAAA,QADmB;AAEnBC,IAAAA,KAAK,GAAG;AAFW,GAMf;AACJ,QAAM,CAACJ,KAAD,EAAQC,QAAR,IAAoBJ,QAAQ,CAACO,KAAD,CAAlC;AACA,sBACE,QAAC,kBAAD,CAAoB,QAApB;AAA6B,IAAA,KAAK,EAAE;AAAEJ,MAAAA,KAAF;AAASC,MAAAA;AAAT,KAApC;AAAA,cACGE;AADH;AAAA;AAAA;AAAA;AAAA,UADF;AAKD,CAbD;;GAAMD,W;;KAAAA,W;;AAeN,MAAMG,cAAc,GAAG,MAAM;AAAA;;AAC3B,QAAMC,OAAO,GAAGR,UAAU,CAACC,kBAAD,CAA1B;;AACA,MAAI,CAACO,OAAL,EAAc;AACZ,UAAM,IAAIC,KAAJ,CAAU,yDAAV,CAAN;AACD;;AACD,SAAOD,OAAP;AACD,CAND;;IAAMD,c;;MAAAA,c;AAQN,SAASH,WAAT,EAAsBG,cAAtB","sourcesContent":["import React, {createContext, useState, useContext, Dispatch, SetStateAction} from 'react';\r\n\r\n\r\nexport interface GlobalStateInterface {\r\n    screen: string,\r\n    userName: string,\r\n    accessLevel: number\r\n  }\r\n\r\n  const GlobalStateContext = createContext({\r\n    state: {} as Partial<GlobalStateInterface>,\r\n    setState: {} as Dispatch<SetStateAction<Partial<GlobalStateInterface>>>,\r\n  });\r\n\r\n  const GlobalState = ({\r\n    children,\r\n    value = {} as GlobalStateInterface,\r\n  }: {\r\n    children: React.ReactNode;\r\n    value?: Partial<GlobalStateInterface>;\r\n  }) => {\r\n    const [state, setState] = useState(value);\r\n    return (\r\n      <GlobalStateContext.Provider value={{ state, setState }}>\r\n        {children}\r\n      </GlobalStateContext.Provider>\r\n    );\r\n  };\r\n  \r\n  const UseGlobalState = () => {\r\n    const context = useContext(GlobalStateContext);\r\n    if (!context) {\r\n      throw new Error(\"useGlobalState must be used within a GlobalStateContext\");\r\n    }\r\n    return context;\r\n  };\r\n  \r\n  export { GlobalState, UseGlobalState };"]},"metadata":{},"sourceType":"module"}