{"ast":null,"code":"import UserSlice from \"../slices/UserSlice\";\nimport { client } from \"../state/AppStore\";\nexport const userActions = UserSlice.actions;\nexport default {\n  async SignIn(dto) {\n    var response = await client.post(\"login\", dto);\n\n    if (response.status === 200) {\n      let authResponse = response.data;\n      userActions.authenticate(authResponse);\n      var userResponse = await client.get(`user/${authResponse.id}}`);\n      let user = parse(userResponse.data);\n      userActions.signIn(user);\n      return;\n    }\n\n    if (response.status === 202) {\n      alert(\"password request sent\");\n      return;\n    } //todo error handling\n\n  },\n\n  SignOut: () => userActions.signOut,\n\n  async Register(dto) {\n    var response = await client.post(\"register\", dto);\n\n    if (response.status === 202) {\n      userActions.signIn(parse(response.data));\n    } //todo errorhandling\n\n  }\n\n};\n\nfunction parse(data) {\n  return {\n    id: data.id,\n    accessLevel: data.accessLevel,\n    countryCode: data.countryCode,\n    lastUpdate: data.details.lastUpdate,\n    createdAt: data.createdAt,\n    email: data.details.email,\n    forgotPassword: data.details.forgotPassword,\n    login: data.details.login,\n    password: data.details.password,\n    userTitle: data.userTitle\n  };\n}\n/*\r\nexport const registerUser(registerDto: RegisterDto) : ThunkAction<void, {\r\n    return function(dispatch: ThunkDispatch) {\r\n        return axios\r\n        .post(\"https://localhost:7222/Api/register\", registerDto)\r\n        .then(({data}) => {\r\n            dispatch(set)\r\n        })\r\n    }\r\n }\r\n */","map":{"version":3,"sources":["C:/dev/Scrabex/ConfigPortal_react/portal-react-ts/src/functions/UserService.tsx"],"names":["UserSlice","client","userActions","actions","SignIn","dto","response","post","status","authResponse","data","authenticate","userResponse","get","id","user","parse","signIn","alert","SignOut","signOut","Register","accessLevel","countryCode","lastUpdate","details","createdAt","email","forgotPassword","login","password","userTitle"],"mappings":"AAIA,OAAOA,SAAP,MAAsB,qBAAtB;AACA,SAAmBC,MAAnB,QAA8C,mBAA9C;AAEA,OAAO,MAAMC,WAAW,GAAGF,SAAS,CAACG,OAA9B;AAEP,eAAe;AACX,QAAMC,MAAN,CAAaC,GAAb,EAA4B;AACxB,QAAIC,QAAQ,GAAG,MAAML,MAAM,CAACM,IAAP,CAAY,OAAZ,EAAqBF,GAArB,CAArB;;AACA,QAAGC,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EAA2B;AACvB,UAAIC,YAAY,GAAGH,QAAQ,CAACI,IAA5B;AACAR,MAAAA,WAAW,CAACS,YAAZ,CAAyBF,YAAzB;AACA,UAAIG,YAAY,GAAG,MAAMX,MAAM,CAACY,GAAP,CAAY,QAAQJ,YAAY,CAACK,EAAI,GAArC,CAAzB;AACA,UAAIC,IAAI,GAAGC,KAAK,CAACJ,YAAY,CAACF,IAAd,CAAhB;AACAR,MAAAA,WAAW,CAACe,MAAZ,CAAmBF,IAAnB;AACA;AACH;;AACD,QAAGT,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EACA;AACIU,MAAAA,KAAK,CAAC,uBAAD,CAAL;AACA;AACH,KAduB,CAgBxB;;AACH,GAlBU;;AAmBXC,EAAAA,OAAO,EAAE,MAAMjB,WAAW,CAACkB,OAnBhB;;AAoBX,QAAMC,QAAN,CAAehB,GAAf,EACA;AACI,QAAIC,QAAQ,GAAG,MAAML,MAAM,CAACM,IAAP,CAAY,UAAZ,EAAwBF,GAAxB,CAArB;;AACA,QAAGC,QAAQ,CAACE,MAAT,KAAoB,GAAvB,EACA;AACIN,MAAAA,WAAW,CAACe,MAAZ,CAAmBD,KAAK,CAACV,QAAQ,CAACI,IAAV,CAAxB;AACH,KALL,CAOI;;AACH;;AA7BU,CAAf;;AAmCA,SAASM,KAAT,CAAgBN,IAAhB,EAAmC;AAC/B,SAAO;AACHI,IAAAA,EAAE,EAAEJ,IAAI,CAACI,EADN;AAEHQ,IAAAA,WAAW,EAAEZ,IAAI,CAACY,WAFf;AAGHC,IAAAA,WAAW,EAAEb,IAAI,CAACa,WAHf;AAIHC,IAAAA,UAAU,EAAEd,IAAI,CAACe,OAAL,CAAaD,UAJtB;AAKHE,IAAAA,SAAS,EAAEhB,IAAI,CAACgB,SALb;AAMHC,IAAAA,KAAK,EAAEjB,IAAI,CAACe,OAAL,CAAaE,KANjB;AAOHC,IAAAA,cAAc,EAAElB,IAAI,CAACe,OAAL,CAAaG,cAP1B;AAQHC,IAAAA,KAAK,EAAEnB,IAAI,CAACe,OAAL,CAAaI,KARjB;AASHC,IAAAA,QAAQ,EAAEpB,IAAI,CAACe,OAAL,CAAaK,QATpB;AAUHC,IAAAA,SAAS,EAAErB,IAAI,CAACqB;AAVb,GAAP;AAYH;AAED;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","sourcesContent":["import axios, { AxiosResponse } from \"axios\";\r\nimport thunk from \"redux-thunk\";\r\nimport { useDispatch } from \"react-redux\";\r\nimport { LoginDto, RegisterDto, User, AuthenticationResponse } from \"../types/UserTypes\";\r\nimport UserSlice from \"../slices/UserSlice\";\r\nimport { AppStore, client, AppDispatch } from \"../state/AppStore\";\r\n\r\nexport const userActions = UserSlice.actions;\r\n\r\nexport default {\r\n    async SignIn(dto: LoginDto) {\r\n        var response = await client.post(\"login\", dto);\r\n        if(response.status === 200){\r\n            let authResponse = response.data as AuthenticationResponse;\r\n            userActions.authenticate(authResponse);\r\n            var userResponse = await client.get(`user/${ authResponse.id }}`);\r\n            let user = parse(userResponse.data);\r\n            userActions.signIn(user);\r\n            return;\r\n        }\r\n        if(response.status === 202)\r\n        {\r\n            alert(\"password request sent\");\r\n            return;\r\n        }\r\n\r\n        //todo error handling\r\n    },\r\n    SignOut: () => userActions.signOut,\r\n    async Register(dto: RegisterDto)\r\n    {\r\n        var response = await client.post(\"register\", dto);\r\n        if(response.status === 202)\r\n        {\r\n            userActions.signIn(parse(response.data));\r\n        }\r\n\r\n        //todo errorhandling\r\n    }\r\n\r\n\r\n\r\n}\r\n\r\nfunction parse (data : any) : User {\r\n    return {\r\n        id: data.id,\r\n        accessLevel: data.accessLevel,\r\n        countryCode: data.countryCode,\r\n        lastUpdate: data.details.lastUpdate,\r\n        createdAt: data.createdAt,\r\n        email: data.details.email,\r\n        forgotPassword: data.details.forgotPassword,\r\n        login: data.details.login,\r\n        password: data.details.password,\r\n        userTitle: data.userTitle,\r\n    } as User;\r\n}\r\n\r\n/*\r\nexport const registerUser(registerDto: RegisterDto) : ThunkAction<void, {\r\n    return function(dispatch: ThunkDispatch) {\r\n        return axios\r\n        .post(\"https://localhost:7222/Api/register\", registerDto)\r\n        .then(({data}) => {\r\n            dispatch(set)\r\n        })\r\n    }\r\n }\r\n */"]},"metadata":{},"sourceType":"module"}